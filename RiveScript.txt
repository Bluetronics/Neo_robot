_____________________________________________________________________________________________________

                        Tutorials for RIVESCRIPT 1.12.3 python version
_____________________________________________________________________________________________________

-----------------------------------------------------------------------------------------------------
===>   Find genre (male/female) and memorize name/age french
-----------------------------------------------------------------------------------------------------
! array nombre = un deux trois quatre cinq six sept huit neuf dix onze douze treize quatorze quinze seize vingt trente quarante cinquante soixante cent
^ dix-sept|dix-huit|dix-neuf|vingt_et_un|...

! array male = anatole antoine armand armel arnaud auguste augustin aurelien axel baptiste barnabe barthelemy basile bastien baudouin benoit blaise brice celestin cesaire...

! array femelle = antoinette apolline arianne arienne aristide armelle arnaude aude aurele aurelie aurore axelle beatrice benedicte benjamine benoite bernadette berthe...

+ (bonjour|salut|hello|hi)[*]
* <get name> == undefined => {random}salut.|bonjour.|hello.{/random} {@ botquiestu}
- {random}salut|bonjour|hello{/random} <get name>. {random}Content de te revoir.|Heureux de te parler à nouveau.|comment vas tu|comment te sens tu|tout va bien ?|tu as besoin de moi ?{/random}

+ botquiestu
- {random}qui es-tu|tu es qui|comment tu t'appelles|c'est quoi ton nom{/random}, déjà

+ [j ai] (@nombre) [ans|annee|annees]
% peux-tu me dire ton age ?
- <set age=<star>> tu as <get age> ans, <get name> ? cool. J'enregistre cette donnée dans ma mémoire.

+ [*] (@male) [*]
% * * déjà
* <star> == vincent => Salut Vincent, content de te revoir, <set name=<formal>> // botmaster
- <set name=<formal>> {random}salut|Hello|merci{/random} <get name>. D'après ton prénom, j'en déduis que tu es de sexe masculin, comme moi. // formal is used to high-cap first letter

+ [*] (@femelle) [*]
% * * déjà
- <set name=<formal>> {random}salut|Hello|merci{/random} <get name>. D'après ton prénom, j'en déduis que tu es de sexe féminin. Moi, je suis programmé pour être plutôt un garçon.

+ *
% * * déjà // name not in arrays
- redonnes-moi juste ton nom, s'il te plait,

+ *
% redonnes-moi juste ton nom s'il te plait
- <set name=<formal><star></formal>> peux-tu me dire ton age ?

-----------------------------------------------------------------------------------------------------
===>   pause object
-----------------------------------------------------------------------------------------------------
// ex : - <call>pause 5</call>  // do a 5s pause before continuing next command
// ex : - the result is,<call>pause 1</call>again a second please,<call>pause 2</call>ok. The result is 6728
> object pause python
    import time
    a = (args)
    a = "".join(a)
    time.sleep(int(a))
< object

-----------------------------------------------------------------------------------------------------
===>   learn object
-----------------------------------------------------------------------------------------------------
write trigger and reply on .rive file for permanent learning,
import both informations on bot for immediate use (no need to restart program and read .rive files)

// ex : "memorize a golden apple is a yellow fruit"
// object converts, write, and import in bot (like set/get) :
// + a golden apple
// - a yellow fruit
// I ask : "what is a golden apple"
// bot replies : "it's a yellow fruit"

    + (memorises|memorise|memorize) [the next information][this entry][this][that] * (is|are) *
    - <call>memorize (+ <star2>     - <star4>)</call> Ok. I just learnt that <star2> is <star4>

    + what is *
    - it's {@<star>}


object memorize python
    a = args
    b = ', '.join(a).replace(',','').replace('(','').replace(')','') # clean string
    c = b.replace(' -','\n-') # insert '\n' separation for stream export
    rs.stream (c)
    rs.sort_replies()
    file = open("./eg/neo_brain/neo_Auto_Learning.rive", "a")
    file.write("\n\n")
    file.write(str(c))
    file.close()
object

-----------------------------------------------------------------------------------------------------
===>   interrogation systeme object
-----------------------------------------------------------------------------------------------------
//ex: on est quel jour néo
//ex: en quelle annee s' il te plait
//ex: en quel mois sommes nous
//ex: il est quelle heure là....

+ (((quel|quelle) jour|(quel|quelle) date) (sommes nous|on est|est il)|(quel est|quelle est) (le jour|la date)) [*]
- {random}Nous sommes|on est{/random} le <call>jour</call> <call>mois</call> <call>annee</call>

+ [en] (quel|quelle) annee (sommes nous|on est) [*]
- {random}Nous sommes|on est{/random} en <call>annee</call>

+ [en] (quel|quelle) mois (sommes nous|on est) [*]
- {random}Nous sommes|on est{/random} en <call>mois</call>

+ ((quel|quelle) heure est il|(quel|quelle) est l heure|il est (quel|quelle) heure) [*]
- il est <call>heure</call>


> object annee python
    import datetime
    dat = datetime.date.today()
    LAnnee = dat.year
    return LAnnee
< object

> object mois python
    import datetime
    Mois=['Janvier','Fevrier','Mars','Avril','Mai','Juin','Juillet','Aout','Septembre','Octobre','Novembre','Decembre']
    dat = datetime.date.today()
    mois = dat.month
    LeMois = Mois[mois-1]
    return LeMois
< object

> object jour python
    import time
    a = time.strftime('%a') # ex: Mon
    b = time.strftime('%d') # ex: 6
    c = a.replace("Sun","Dimanche").replace("Mon","Lundi").replace("Tue","Mardi").replace("Wed","Mercredi").replace("Thu","Jeudi").replace("Fri","Vendredi").replace("Sat","Samedi")
    jour = c+" "+b
    return jour
< object

> object heure python
    import time
    Heure = time.strftime('%H heures %M minutes et %S secondes',time.localtime())
    return Heure
< object

-----------------------------------------------------------------------------------------------------
===>   learn on wikipedia
-----------------------------------------------------------------------------------------------------
//ex: recherche sur internet einstein
+ ((cherche|recherche|cherches|recherches) sur (internet|wikipedia)) *
- <call>WikiPerson <star2></call>

> object WikiPerson python
    import wikipedia
    search = ""
    wikipedia.set_lang("fr")
    wordSearch = (args)
    wordSearch2 = str(wordSearch)
    search = wordSearch2.encode('utf8')
    FirstSearch = wikipedia.search((search), results=1)
    modWord2 = str(FirstSearch)
    Search = wikipedia.summary(modWord2, sentences=3)
    return type(Search)
< object

-----------------------------------------------------------------------------------------------------
===>   random robot sentences from wikipedia
-----------------------------------------------------------------------------------------------------
//ex:

> object WikiRandom python 

    import wikipedia
    wikipedia.set_lang("fr")
    wordSearch = wikipedia.random(pages=1)
    search = wordSearch.encode('utf8')
    try :
        Search = wikipedia.summary(search, sentences=3)
    except :
        a = 'Désolé, je ne sais pas quoi te dire'
        return (a)
    try:
        cleaning = Search.replace('(','').replace(')','').replace('/',' ') # remove parenthesis from text for better speaking
    except :
        pass
    try:
        a = cleaning.split('[')[0] # remove phonetics
        b = cleaning.split(']')[1]
        cleaned = a+b 
        return (cleaned)
    except :
        try :
            return (cleaning)
        except :
            try :
                return (Search)
            except :
                a = 'Désolé, je ne sais pas quoi te dire'
                return (a)
< object
